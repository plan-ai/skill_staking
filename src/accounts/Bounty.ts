/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link Bounty}
 * @category Accounts
 * @category generated
 */
export type BountyArgs = {
  bump: number
  bountyCreator: web3.PublicKey
  bountyMetadata: string
  bountyReward: beet.bignum
  bountySkillset: string[]
  bountyDeadline: beet.COption<beet.bignum>
  bountyAssigned: beet.COption<web3.PublicKey>
  bountyAppliers: web3.PublicKey[]
  bountyClosed: boolean
  bountyClaimed: boolean
  claimed: web3.PublicKey[]
  index: string
}

export const bountyDiscriminator = [237, 16, 105, 198, 19, 69, 242, 234]
/**
 * Holds the data for the {@link Bounty} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Bounty implements BountyArgs {
  private constructor(
    readonly bump: number,
    readonly bountyCreator: web3.PublicKey,
    readonly bountyMetadata: string,
    readonly bountyReward: beet.bignum,
    readonly bountySkillset: string[],
    readonly bountyDeadline: beet.COption<beet.bignum>,
    readonly bountyAssigned: beet.COption<web3.PublicKey>,
    readonly bountyAppliers: web3.PublicKey[],
    readonly bountyClosed: boolean,
    readonly bountyClaimed: boolean,
    readonly claimed: web3.PublicKey[],
    readonly index: string
  ) {}

  /**
   * Creates a {@link Bounty} instance from the provided args.
   */
  static fromArgs(args: BountyArgs) {
    return new Bounty(
      args.bump,
      args.bountyCreator,
      args.bountyMetadata,
      args.bountyReward,
      args.bountySkillset,
      args.bountyDeadline,
      args.bountyAssigned,
      args.bountyAppliers,
      args.bountyClosed,
      args.bountyClaimed,
      args.claimed,
      args.index
    )
  }

  /**
   * Deserializes the {@link Bounty} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Bounty, number] {
    return Bounty.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Bounty} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Bounty> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Bounty account at ${address}`)
    }
    return Bounty.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'CnMMyfQSGk7h6YNf2uLmBuLpfBKuMTYPct6PmFMM3P24'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, bountyBeet)
  }

  /**
   * Deserializes the {@link Bounty} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Bounty, number] {
    return bountyBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Bounty} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return bountyBeet.serialize({
      accountDiscriminator: bountyDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Bounty} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: BountyArgs) {
    const instance = Bounty.fromArgs(args)
    return bountyBeet.toFixedFromValue({
      accountDiscriminator: bountyDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Bounty} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: BountyArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Bounty.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link Bounty} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      bountyCreator: this.bountyCreator.toBase58(),
      bountyMetadata: this.bountyMetadata,
      bountyReward: (() => {
        const x = <{ toNumber: () => number }>this.bountyReward
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      bountySkillset: this.bountySkillset,
      bountyDeadline: this.bountyDeadline,
      bountyAssigned: this.bountyAssigned,
      bountyAppliers: this.bountyAppliers,
      bountyClosed: this.bountyClosed,
      bountyClaimed: this.bountyClaimed,
      claimed: this.claimed,
      index: this.index,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const bountyBeet = new beet.FixableBeetStruct<
  Bounty,
  BountyArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bump', beet.u8],
    ['bountyCreator', beetSolana.publicKey],
    ['bountyMetadata', beet.utf8String],
    ['bountyReward', beet.u64],
    ['bountySkillset', beet.array(beet.utf8String)],
    ['bountyDeadline', beet.coption(beet.u64)],
    ['bountyAssigned', beet.coption(beetSolana.publicKey)],
    ['bountyAppliers', beet.array(beetSolana.publicKey)],
    ['bountyClosed', beet.bool],
    ['bountyClaimed', beet.bool],
    ['claimed', beet.array(beetSolana.publicKey)],
    ['index', beet.utf8String],
  ],
  Bounty.fromArgs,
  'Bounty'
)
