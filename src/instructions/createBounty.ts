/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CreateBounty
 * @category generated
 */
export type CreateBountyInstructionArgs = {
  bountyIndex: string
  bountyReward: beet.bignum
  bountyMetadata: string
  bountySkillset: string[]
  bountyDeadline: beet.COption<beet.bignum>
}
/**
 * @category Instructions
 * @category CreateBounty
 * @category generated
 */
export const createBountyStruct = new beet.FixableBeetArgsStruct<
  CreateBountyInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bountyIndex', beet.utf8String],
    ['bountyReward', beet.u64],
    ['bountyMetadata', beet.utf8String],
    ['bountySkillset', beet.array(beet.utf8String)],
    ['bountyDeadline', beet.coption(beet.u64)],
  ],
  'CreateBountyInstructionArgs'
)
/**
 * Accounts required by the _createBounty_ instruction
 *
 * @property [_writable_, **signer**] bountyCreator
 * @property [_writable_] bountyCreatorTokenAccount
 * @property [] usdcMint
 * @property [_writable_] bountyAccount
 * @property [_writable_] bountyTokenAccount
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category CreateBounty
 * @category generated
 */
export type CreateBountyInstructionAccounts = {
  bountyCreator: web3.PublicKey
  bountyCreatorTokenAccount: web3.PublicKey
  usdcMint: web3.PublicKey
  bountyAccount: web3.PublicKey
  bountyTokenAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createBountyInstructionDiscriminator = [
  122, 90, 14, 143, 8, 125, 200, 2,
]

/**
 * Creates a _CreateBounty_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateBounty
 * @category generated
 */
export function createCreateBountyInstruction(
  accounts: CreateBountyInstructionAccounts,
  args: CreateBountyInstructionArgs,
  programId = new web3.PublicKey('CnMMyfQSGk7h6YNf2uLmBuLpfBKuMTYPct6PmFMM3P24')
) {
  const [data] = createBountyStruct.serialize({
    instructionDiscriminator: createBountyInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.bountyCreator,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.bountyCreatorTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.usdcMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.bountyAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.bountyTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
