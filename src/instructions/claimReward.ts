/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ClaimReward
 * @category generated
 */
export const claimRewardStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'ClaimRewardInstructionArgs'
)
/**
 * Accounts required by the _claimReward_ instruction
 *
 * @property [_writable_, **signer**] staker
 * @property [_writable_] bountyAccount
 * @property [] usdcMint
 * @property [_writable_] stakerTokenAccount
 * @property [] skillStake
 * @property [_writable_] skillStakeTokenAccount
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category ClaimReward
 * @category generated
 */
export type ClaimRewardInstructionAccounts = {
  staker: web3.PublicKey
  bountyAccount: web3.PublicKey
  usdcMint: web3.PublicKey
  stakerTokenAccount: web3.PublicKey
  skillStake: web3.PublicKey
  skillStakeTokenAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const claimRewardInstructionDiscriminator = [
  149, 95, 181, 242, 94, 90, 158, 162,
]

/**
 * Creates a _ClaimReward_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category ClaimReward
 * @category generated
 */
export function createClaimRewardInstruction(
  accounts: ClaimRewardInstructionAccounts,
  programId = new web3.PublicKey('CnMMyfQSGk7h6YNf2uLmBuLpfBKuMTYPct6PmFMM3P24')
) {
  const [data] = claimRewardStruct.serialize({
    instructionDiscriminator: claimRewardInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.staker,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.bountyAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.usdcMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stakerTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.skillStake,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.skillStakeTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
