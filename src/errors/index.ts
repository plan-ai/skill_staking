/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * SignatureVerificationFailed: 'Invalid Signature'
 *
 * @category Errors
 * @category generated
 */
export class SignatureVerificationFailedError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'SignatureVerificationFailed'
  constructor() {
    super('Invalid Signature')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SignatureVerificationFailedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1770,
  () => new SignatureVerificationFailedError()
)
createErrorFromNameLookup.set(
  'SignatureVerificationFailed',
  () => new SignatureVerificationFailedError()
)

/**
 * UnauthorizedUser: 'User not verified'
 *
 * @category Errors
 * @category generated
 */
export class UnauthorizedUserError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'UnauthorizedUser'
  constructor() {
    super('User not verified')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnauthorizedUserError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new UnauthorizedUserError())
createErrorFromNameLookup.set(
  'UnauthorizedUser',
  () => new UnauthorizedUserError()
)

/**
 * UnauthorizedActionAttempted: 'Unauthorized smart contract Action'
 *
 * @category Errors
 * @category generated
 */
export class UnauthorizedActionAttemptedError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'UnauthorizedActionAttempted'
  constructor() {
    super('Unauthorized smart contract Action')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnauthorizedActionAttemptedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1772,
  () => new UnauthorizedActionAttemptedError()
)
createErrorFromNameLookup.set(
  'UnauthorizedActionAttempted',
  () => new UnauthorizedActionAttemptedError()
)

/**
 * InsufficientStakingFunds: 'Insufficient funds for staking'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientStakingFundsError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InsufficientStakingFunds'
  constructor() {
    super('Insufficient funds for staking')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientStakingFundsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InsufficientStakingFundsError())
createErrorFromNameLookup.set(
  'InsufficientStakingFunds',
  () => new InsufficientStakingFundsError()
)

/**
 * TokenAccountMismatch: 'Token account mismatch'
 *
 * @category Errors
 * @category generated
 */
export class TokenAccountMismatchError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'TokenAccountMismatch'
  constructor() {
    super('Token account mismatch')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TokenAccountMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new TokenAccountMismatchError())
createErrorFromNameLookup.set(
  'TokenAccountMismatch',
  () => new TokenAccountMismatchError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
